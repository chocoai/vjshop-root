/*
 * This file is generated by jOOQ.
*/
package com.vjshop.dao;


import com.vjshop.generated.db.tables.TProductCategoryBrand;
import com.vjshop.generated.db.tables.records.TProductCategoryBrandRecord;
import org.jooq.Configuration;
import org.jooq.Record2;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import javax.annotation.Generated;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class TProductCategoryBrandDao extends JooqBaseDao<TProductCategoryBrandRecord, com.vjshop.entity.TProductCategoryBrand, Long> {

    /**
     * Create a new TProductCategoryBrandDao without any configuration
     */
    public TProductCategoryBrandDao() {
        super(TProductCategoryBrand.T_PRODUCT_CATEGORY_BRAND, com.vjshop.entity.TProductCategoryBrand.class);
    }

    /**
     * Create a new TProductCategoryBrandDao with an attached configuration
     */
    @Autowired
    public TProductCategoryBrandDao(Configuration configuration) {
        super(TProductCategoryBrand.T_PRODUCT_CATEGORY_BRAND, com.vjshop.entity.TProductCategoryBrand.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(com.vjshop.entity.TProductCategoryBrand object) {
        return compositeKeyRecord(object.getProductCategories(), object.getBrands());
    }

    /**
     * Fetch records that have <code>product_categories IN (values)</code>
     */
    public List<com.vjshop.entity.TProductCategoryBrand> fetchByProductCategories(Long... values) {
        return fetch(TProductCategoryBrand.T_PRODUCT_CATEGORY_BRAND.PRODUCT_CATEGORIES, values);
    }

    /**
     * Fetch records that have <code>brands IN (values)</code>
     */
    public List<com.vjshop.entity.TProductCategoryBrand> fetchByBrands(Long... values) {
        return fetch(TProductCategoryBrand.T_PRODUCT_CATEGORY_BRAND.BRANDS, values);
    }
}
