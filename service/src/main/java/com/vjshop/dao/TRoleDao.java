/*
 * This file is generated by jOOQ.
*/
package com.vjshop.dao;


import com.vjshop.dao.JooqBaseDao;
import com.vjshop.generated.db.tables.TRole;
import com.vjshop.generated.db.tables.records.TRoleRecord;

import java.sql.ResultSet;
import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import static com.vjshop.generated.db.tables.TAdminRole.T_ADMIN_ROLE;
import static com.vjshop.generated.db.tables.TRole.T_ROLE;


/**
 * 角色DAO
 */
@Repository
public class TRoleDao extends JooqBaseDao<TRoleRecord, com.vjshop.entity.TRole, Long> {

    /**
     * Create a new TRoleDao without any configuration
     */
    public TRoleDao() {
        super(T_ROLE, com.vjshop.entity.TRole.class);
    }

    /**
     * Create a new TRoleDao with an attached configuration
     */
    @Autowired
    public TRoleDao(Configuration configuration) {
        super(T_ROLE, com.vjshop.entity.TRole.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(com.vjshop.entity.TRole object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.vjshop.entity.TRole> fetchById(Long... values) {
        return fetch(T_ROLE.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.vjshop.entity.TRole fetchOneById(Long value) {
        return fetchOne(T_ROLE.ID, value);
    }

    /**
     * Fetch records that have <code>create_date IN (values)</code>
     */
    public List<com.vjshop.entity.TRole> fetchByCreateDate(Timestamp... values) {
        return fetch(T_ROLE.CREATE_DATE, values);
    }

    /**
     * Fetch records that have <code>modify_date IN (values)</code>
     */
    public List<com.vjshop.entity.TRole> fetchByModifyDate(Timestamp... values) {
        return fetch(T_ROLE.MODIFY_DATE, values);
    }

    /**
     * Fetch records that have <code>version IN (values)</code>
     */
    public List<com.vjshop.entity.TRole> fetchByVersion(Long... values) {
        return fetch(T_ROLE.VERSION, values);
    }

    /**
     * Fetch records that have <code>authorities IN (values)</code>
     */
    public List<com.vjshop.entity.TRole> fetchByAuthorities(String... values) {
        return fetch(T_ROLE.AUTHORITIES, values);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<com.vjshop.entity.TRole> fetchByDescription(String... values) {
        return fetch(T_ROLE.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>is_system IN (values)</code>
     */
    public List<com.vjshop.entity.TRole> fetchByIsSystem(Boolean... values) {
        return fetch(T_ROLE.IS_SYSTEM, values);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.vjshop.entity.TRole> fetchByName(String... values) {
        return fetch(T_ROLE.NAME, values);
    }

    /**
     * 根据roleId查询有没有对应的用户
     * @param id
     * @return
     */
    public Boolean hasUser(Long id) {
        long count = getDslContext()
                .selectCount()
                .from(T_ROLE)
                .join(T_ADMIN_ROLE).on(T_ROLE.ID.eq(T_ADMIN_ROLE.ROLES))
                .where(T_ROLE.ID.eq(id))
                .fetchOne(0, Long.class).longValue();
        return count > 0;
    }

    /**
     * 根据adminId找到对应的所有角色
     * @param adminId
     * @return
     */
    public List<com.vjshop.entity.TRole> findRolesByAdminId(Long adminId) {
        ResultSet resultSet = getDslContext()
                .select(T_ROLE.fields())
                .from(T_ROLE)
                .join(T_ADMIN_ROLE).on(T_ROLE.ID.eq(T_ADMIN_ROLE.ROLES))
                .where(T_ADMIN_ROLE.ADMINS.eq(adminId))
                .fetchResultSet();
        return resultSet2List(resultSet);

    }
}
